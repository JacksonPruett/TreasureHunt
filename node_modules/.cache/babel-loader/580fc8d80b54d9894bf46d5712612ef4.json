{"ast":null,"code":"var _jsxFileName = \"/Users/jacksonpruett/Desktop/TreasureHunt/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Square from \"./components/Square\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const initialBoard = [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"];\n  const [board, setBoard] = useState([...initialBoard]);\n  const [guess, setGuess] = useState(5);\n  const [treasureLocation, setTreasureLocation] = useState(null);\n  const [bombLocation, setBombLocation] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const alertShownRef = useRef(false);\n  useEffect(() => {\n    setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n    setBombLocation(Math.floor(Math.random() * initialBoard.length));\n  }, []); // The empty dependency array ensures this effect runs once after the initial render\n\n  useEffect(() => {\n    if (guess === 0 && !alertShownRef.current) {\n      setGameOver(true);\n      alert(\"Game over! Click 'Play again?' to reset.\");\n      alertShownRef.current = true;\n    }\n  }, [guess]);\n\n  const handleSquareClick = clickedSquareIndex => {\n    if (!gameOver) {\n      let updatedBoard = [...board];\n\n      if (clickedSquareIndex === treasureLocation) {\n        updatedBoard[clickedSquareIndex] = \"ðŸ’Ž\";\n        alert(\"Congratulations! You won!\");\n        setBoard([...initialBoard]);\n        setGuess(5);\n        setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n        setBombLocation(Math.floor(Math.random() * initialBoard.length));\n        setGameOver(true); // Disable further moves after winning\n      } else if (clickedSquareIndex === bombLocation) {\n        updatedBoard[clickedSquareIndex] = \"ðŸ’£\";\n        alert(\"Oops! You lost.\");\n        setBoard([...initialBoard]);\n        setGuess(5);\n        setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n        setBombLocation(Math.floor(Math.random() * initialBoard.length));\n        setGameOver(true); // Disable further moves after losing\n      } else {\n        updatedBoard[clickedSquareIndex] = \"ðŸ‘¾\";\n        setGuess(guess - 1);\n      }\n\n      setBoard(updatedBoard);\n    } else {\n      alert(\"Game over! Click 'Play again?' to reset.\");\n    }\n  };\n\n  const refresh = () => {\n    setBoard([...initialBoard]);\n    setGuess(5);\n    setGameOver(false);\n    alertShownRef.current = false;\n    setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n    setBombLocation(Math.floor(Math.random() * initialBoard.length));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Alien Invasion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.map((value, index) => /*#__PURE__*/_jsxDEV(Square, {\n          value: value,\n          index: index,\n          handleSquareClick: handleSquareClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"restart\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refresh,\n          children: \"Play again?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"guess-box\",\n        children: [\"Galactic Currency Remaining: \", guess]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"LLUSW7CVHW0akHdXP2a8Ma3K2Jk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Square","App","initialBoard","board","setBoard","guess","setGuess","treasureLocation","setTreasureLocation","bombLocation","setBombLocation","gameOver","setGameOver","alertShownRef","Math","floor","random","length","current","alert","handleSquareClick","clickedSquareIndex","updatedBoard","refresh","map","value","index"],"sources":["/Users/jacksonpruett/Desktop/TreasureHunt/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Square from \"./components/Square\";\nimport \"./App.css\";\n\nconst App = () => {\n  const initialBoard = [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"];\n\n  const [board, setBoard] = useState([...initialBoard]);\n  const [guess, setGuess] = useState(5);\n  const [treasureLocation, setTreasureLocation] = useState(null);\n  const [bombLocation, setBombLocation] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const alertShownRef = useRef(false);\n\n  useEffect(() => {\n    setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n    setBombLocation(Math.floor(Math.random() * initialBoard.length));\n  }, []); // The empty dependency array ensures this effect runs once after the initial render\n\n  useEffect(() => {\n    if (guess === 0 && !alertShownRef.current) {\n      setGameOver(true);\n      alert(\"Game over! Click 'Play again?' to reset.\");\n      alertShownRef.current = true;\n    }\n  }, [guess]);\n\n  const handleSquareClick = (clickedSquareIndex) => {\n    if (!gameOver) {\n      let updatedBoard = [...board];\n\n      if (clickedSquareIndex === treasureLocation) {\n        updatedBoard[clickedSquareIndex] = \"ðŸ’Ž\";\n        alert(\"Congratulations! You won!\");\n        setBoard([...initialBoard]);\n        setGuess(5);\n        setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n        setBombLocation(Math.floor(Math.random() * initialBoard.length));\n        setGameOver(true); // Disable further moves after winning\n      } else if (clickedSquareIndex === bombLocation) {\n        updatedBoard[clickedSquareIndex] = \"ðŸ’£\";\n        alert(\"Oops! You lost.\");\n        setBoard([...initialBoard]);\n        setGuess(5);\n        setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n        setBombLocation(Math.floor(Math.random() * initialBoard.length));\n        setGameOver(true); // Disable further moves after losing\n      } else {\n        updatedBoard[clickedSquareIndex] = \"ðŸ‘¾\";\n        setGuess(guess - 1);\n      }\n\n      setBoard(updatedBoard);\n    } else {\n      alert(\"Game over! Click 'Play again?' to reset.\");\n    }\n  };\n\n  const refresh = () => {\n    setBoard([...initialBoard]);\n    setGuess(5);\n    setGameOver(false);\n    alertShownRef.current = false;\n    setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n    setBombLocation(Math.floor(Math.random() * initialBoard.length));\n  };\n\n  return (\n    <>\n      <h1>Alien Invasion</h1>\n      <div className=\"outer-box\">\n        <div className=\"board\">\n          {board.map((value, index) => (\n            <Square\n              key={index}\n              value={value}\n              index={index}\n              handleSquareClick={handleSquareClick}\n            />\n          ))}\n        </div>\n        <div className=\"restart\">\n          <button onClick={refresh}>Play again?</button>\n        </div>\n        <p className=\"guess-box\">Galactic Currency Remaining: {guess}</p>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}