{"ast":null,"code":"var _jsxFileName = \"/Users/jacksonpruett/Desktop/TreasureHunt/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Square from \"./components/Square\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const initialBoard = [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"];\n  const [board, setBoard] = useState([...initialBoard]);\n  const [guess, setGuess] = useState(5);\n  const [treasureLocation, setTreasureLocation] = useState(null);\n  const [bombLocation, setBombLocation] = useState(null);\n  useEffect(() => {\n    setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n    setBombLocation(Math.floor(Math.random() * initialBoard.length));\n  }, []); // The empty dependency array ensures this effect runs once after the initial render\n\n  const handleSquareClick = clickedSquareIndex => {\n    if (guess > 0) {\n      let updatedBoard = [...board];\n\n      if (clickedSquareIndex === treasureLocation) {\n        updatedBoard[clickedSquareIndex] = \"ðŸ’Ž\";\n        alert(\"Congratulations! You won!\");\n        setBoard([...initialBoard]);\n        setGuess(5);\n        setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n        setBombLocation(Math.floor(Math.random() * initialBoard.length));\n      } else if (clickedSquareIndex === bombLocation) {\n        updatedBoard[clickedSquareIndex] = \"ðŸ’£\";\n        alert(\"Oops! You lost.\");\n        setBoard([...initialBoard]);\n        setGuess(5);\n        setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n        setBombLocation(Math.floor(Math.random() * initialBoard.length));\n      } else {\n        updatedBoard[clickedSquareIndex] = \"ðŸ‘¾\";\n        setGuess(guess - 1);\n      }\n\n      setBoard(updatedBoard);\n    } else {\n      alert(\"Game over! Click 'Play again?' to reset.\");\n    }\n  };\n\n  const refresh = () => {\n    setBoard([...initialBoard]);\n    setGuess(5);\n    setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n    setBombLocation(Math.floor(Math.random() * initialBoard.length));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Alien Invasion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: board.map((value, index) => /*#__PURE__*/_jsxDEV(Square, {\n          value: value,\n          index: index,\n          handleSquareClick: handleSquareClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"restart\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refresh,\n          children: \"Play again?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"guess-box\",\n        children: [\"Galactic Currency Remaining: \", guess]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"nDCy1tpa92cor7nFXnTLMGJCWNo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Square","App","initialBoard","board","setBoard","guess","setGuess","treasureLocation","setTreasureLocation","bombLocation","setBombLocation","Math","floor","random","length","handleSquareClick","clickedSquareIndex","updatedBoard","alert","refresh","map","value","index"],"sources":["/Users/jacksonpruett/Desktop/TreasureHunt/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Square from \"./components/Square\";\nimport \"./App.css\";\n\nconst App = () => {\n  const initialBoard = [\"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\", \"?\"];\n\n  const [board, setBoard] = useState([...initialBoard]);\n  const [guess, setGuess] = useState(5);\n  const [treasureLocation, setTreasureLocation] = useState(null);\n  const [bombLocation, setBombLocation] = useState(null);\n\n  useEffect(() => {\n    setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n    setBombLocation(Math.floor(Math.random() * initialBoard.length));\n  }, []); // The empty dependency array ensures this effect runs once after the initial render\n\n  const handleSquareClick = (clickedSquareIndex) => {\n    if (guess > 0) {\n      let updatedBoard = [...board];\n  \n      if (clickedSquareIndex === treasureLocation) {\n        updatedBoard[clickedSquareIndex] = \"ðŸ’Ž\";\n        alert(\"Congratulations! You won!\");\n        setBoard([...initialBoard]);\n        setGuess(5);\n        setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n        setBombLocation(Math.floor(Math.random() * initialBoard.length));\n      } else if (clickedSquareIndex === bombLocation) {\n        updatedBoard[clickedSquareIndex] = \"ðŸ’£\";\n        alert(\"Oops! You lost.\");\n        setBoard([...initialBoard]);\n        setGuess(5);\n        setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n        setBombLocation(Math.floor(Math.random() * initialBoard.length));\n      } else {\n        updatedBoard[clickedSquareIndex] = \"ðŸ‘¾\";\n        setGuess(guess - 1);\n      }\n  \n      setBoard(updatedBoard);\n    } else {\n      alert(\"Game over! Click 'Play again?' to reset.\");\n    }\n  };\n  \n\n  const refresh = () => {\n    setBoard([...initialBoard]);\n    setGuess(5);\n    setTreasureLocation(Math.floor(Math.random() * initialBoard.length));\n    setBombLocation(Math.floor(Math.random() * initialBoard.length));\n  };\n\n  return (\n    <>\n      <h1>Alien Invasion</h1>\n      <div className=\"outer-box\">\n        <div className=\"board\">\n          {board.map((value, index) => (\n            <Square\n              key={index}\n              value={value}\n              index={index}\n              handleSquareClick={handleSquareClick}\n            />\n          ))}\n        </div>\n        <div className=\"restart\">\n          <button onClick={refresh}>Play again?</button>\n        </div>\n        <p className=\"guess-box\">Galactic Currency Remaining: {guess}</p>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}